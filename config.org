#+TITLE: RL's Doom Emacs Config
#+AUTHOR: Ryan Lloyd (RL)
#+DESCRIPTION: RL's personal Doom Emacs config.
#+PROPERTY: header-args :tangle config.el
#+STARTUP: overview

* Dired controls cheatsheet
https://www.youtube.com/watch?v=oZSmlAAbmYs&feature=emb_title
- New Directory: +
- Mark for Deletion: d
- Delete marked: x
- Sort: o
- Modify file mode (Linux): M
- Set Owner (Linux): O
- Mark file: m
- Invert marks: t
- Remove marks: U
- Rename: i (insert mode)
- Based on dired-dwim-target (Do What I Mean)
  + Copy from pane to next pane: C
  + Move from pane to next pane: R
* Enable debugging
#+BEGIN_SRC emacs-lisp
; Toggle this to enable / disable debugging on error
; (setq debug-on-error t)
(setq debug-on-error nil)
#+END_SRC
* Basic
#+BEGIN_SRC emacs-lisp

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Ryan Lloyd"
      user-mail-address "gmrl95@gmail.com")
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

; XPLM ECAD File Associations
(add-to-list 'auto-mode-alist '("\\.classification\\'" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.datamodel\\'" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.release\\'" . ruby-mode))

; Visual Basic File Associations
(add-to-list 'auto-mode-alist '("\\.vb\\'" . visual-basic-mode))

(require 'gdscript-mode)

#+END_SRC
* Highlight
SPC a h for highlight
#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "Highlight"
      "a h" #'(lambda () (interactive) (highlight-symbol)))
#+END_SRC
* Org
Note that I wrapped most of this in (after! org).  Without this, my settings might be evaluated too early, which will result in my settings being overwritten by Doom's defaults.  I have also enabled org-journal by adding (+journal) to the org section of my Doom Emacs init.el.
Want to use query
customer="insitu"

#+BEGIN_SRC emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Dropbox/org-mode")
(setq org-journal-dir (concat org-directory "/journal"))


(defun daily-name   (&optional time) (format-time-string "%Y-%m-%d [%a]" time))
(defun weekly-name  (&optional time) (format-time-string "%Y-%m W%W" time))
(defun monthly-name (&optional time) (format-time-string "%Y-%m" time))
(defun year-name    (&optional time) (format-time-string "%Y" time))


(defun days-from-now (days)
    (let* ((final-date (decode-time)))
        (cl-incf (nth 3 final-date) days)
        (apply #'encode-time final-date)))

; TODO sets day to first of the month so we don't blow past an enitre month with fewer days
; ie. it's Jan 29th and next month is Feb, if we don't change the day encode-time will interperet as March
(defun months-from-now (months)
    (let* ((final-date (decode-time)))
         ; Set day to First of the month
         (setf (nth 3 final-date) 1)
         (cl-incf (nth 4 final-date) months)
         (apply #'encode-time final-date)))

; Journal

(defconst org-mode-daily-file
    (expand-file-name (concat org-journal-dir "/" (year-name) "/" (daily-name) ".org"))
    "Today's org mode journal file")

(defconst org-mode-weekly-file
    (expand-file-name (concat org-journal-dir "/" (year-name) "/" (weekly-name) ".org"))
    "Week's org mode journal file")

(defconst org-mode-monthly-file
    (expand-file-name (concat org-journal-dir "/" (year-name) "/" (monthly-name) ".org"))
    "Month's org mode journal file")

(defconst org-mode-weekly-report-file
    (expand-file-name (concat org-journal-dir "/" (year-name) "/" (weekly-name) " Report.org"))
    "Month's org mode journal file")

(defun org-mode-future-daily-file (days)
    "Future Day's org mode journal file"
    (interactive)
    (expand-file-name (concat org-journal-dir "/" (year-name) "/"  (daily-name (days-from-now days)) ".org")))

(defun org-mode-future-weekly-file (weeks)
    "Future Week's org mode journal file"
    (interactive)
    (expand-file-name (concat org-journal-dir "/" (year-name) "/" (weekly-name (days-from-now (* weeks 7))) ".org")))

(defun org-mode-future-monthly-file (months)
    "Future Month's org mode journal file"
    (interactive)
    (expand-file-name (concat org-journal-dir "/" (year-name) "/"(monthly-name (months-from-now months)) ".org")))

(map! :desc "Daily Journal"
    "M-n d" #'(lambda () (interactive) (find-file org-mode-daily-file))
    :desc "Weekly Journal"
    "M-n w" #'(lambda () (interactive) (find-file org-mode-weekly-file))
    :desc "Weekly Report"
    "M-n r" #'(lambda () (interactive) (find-file org-mode-weekly-report-file))
    :desc "Monthly Journal"
    "M-n m" #'(lambda () (interactive) (find-file org-mode-monthly-file))

    :desc "Tomorrow Journal"
    "M-n n d" #'(lambda () (interactive) (find-file (org-mode-future-daily-file 1)))
    :desc "Next Week Journal"
    "M-n n w" #'(lambda () (interactive) (find-file (org-mode-future-weekly-file 1)))
    :desc "Next Month Journal"
    "M-n n m" #'(lambda () (interactive) (find-file (org-mode-future-monthly-file 1)))

    :desc "Yesterday Journal"
    "M-n p d" #'(lambda () (interactive) (find-file (org-mode-future-daily-file -1)))
    :desc "Prev Week Journal"
    "M-n p w" #'(lambda () (interactive) (find-file (org-mode-future-weekly-file -1)))
    :desc "Prev Month Journal"
    "M-n p m" #'(lambda () (interactive) (find-file (org-mode-future-monthly-file -1))))


(after! org
  (require 'org-bullets)  ; Nicer bullets in org-mode
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  (setq org-agenda-files (list
                         ;(concat org-directory "/work/xplm/projects")
                         ;(concat org-directory "/work/xplm/ecad")
                         ;(concat org-directory "/work/xplm/ecad/customers")
                         ;(concat org-directory "/work/xplm/clients")
                         (concat org-directory "/agenda")
                         ))

  (setq org-default-notes-file (expand-file-name "notes.org" org-directory)
        org-ellipsis " â–¼ "
        org-log-done 'time
        org-use-property-inheritance t
        org-journal-dir (concat org-directory "/journal")
        org-journal-date-format "%B %d, %Y (%A)"
        org-journal-file-format "%Y-%m-%d.org"
        +org-capture-todo-file (concat org-directory "/agenda/todo.org")
        ;org-startup-folded t
        org-hide-emphasis-markers nil
        browse-url-browser-function 'browse-url-default-browser
        ;; ex. of org-link-abbrev-alist in action
        ;; [[arch-wiki:Name_of_Page][Description]]
        org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list
          '(("google" . "http://www.google.com/search?q=")
            ("ddg" . "https://duckduckgo.com/?q=")
            ("wiki" . "https://en.wikipedia.org/wiki/"))
        org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
          '((sequence
             "TODO(t)"           ; A task that is ready to be tackled
             "NEXT(n)"           ; Task is next in line to be done
             "WAIT(w)"           ; Something is holding up this task
             "SOMEDAY(s)"        ; Might do it eventually?
             "FUTURE(f)"         ; To be completed in the unspecified future
             "|"                 ; The pipe necessary to separate "active" states and "inactive" states
             "DONE(d)"           ; Task has been completed
             "DELEGATED(z)"      ; Task is someone else's responsibility
             "CANCELLED(c)" )))) ; Task has been cancelled

;; Date Tree
;(setq-default org-reverse-datetree-level-formats
;              '("%Y"                    ; year
;                (lambda (time) (format-time-string "%Y-%m %B" (org-reverse-datetree-monday time))) ; month
;                "%Y W%W"                ; week
;                "%Y-%m-%d %A"           ; date
;                ))
(setq-default org-reverse-datetree-level-formats'("%Y W%W")) ; Only week; Year and month are file specific

; Define method to archive to a specific file based on the year and month
(defun custom-archive-command (&rest arg)
  ;(interactive "P")
  (interactive)
  (let ((time-stamp (org-reverse-datetree--get-entry-time
                     ;:ask-always t
                     :prefer`("CLOSED" "DEADLINE" "SCHEDULED"))))
  (org-reverse-datetree-refile-to-file
   (concat org-directory "/agenda-archive/" (monthly-name time-stamp) ".org")
   time-stamp)))

(setq org-archive-default-command 'custom-archive-command)

(map! :leader
      :map org-mode-map
      :desc "Archive"
      "m A" #'(lambda () (interactive) (org-archive-subtree-default)))

; Ensure Package is loaded after org
; Will also immediately load org on startup without additional args
(use-package! org-reverse-datetree)
  ;:hook (org-mode-hook))
#+END_SRC
** Agenda
- Added a search that can change based on user input
  + Cannot seem to populate all valid values for a specific property
  + Need to statically define lists (like customer)
  + This is mostly fine, as all TODOs for a project should be in their own file
  + org agenda is like the "glue" that holds multiple project scopes together

- Can search by showing all TODOs
  + then filter using org-agenda-filter-by-tag
  + then filter using org-agenda-filter-by-category
- Commented out to use super agenda

#+BEGIN_SRC emacs-lisp
(setq xplm-customers '("xplm" "insitu" "ddc" "telestream"))
(defun org-agenda-prop-search (property value)
  "Show TODOs that have match PROPERTY = VALUE"
  (org-tags-view t (format "%s=\"%s\"/TODO" property value)))
  ;(let ((org-use-property-inheritance
         ;(append org-use-property-inheritance '(property)))
        ;)
    ;(org-tags-view t (format "%s=\"%s\"/TODO" property value))
    ;)
  ;)

; See here for more https://orgmode.org/worg/org-tutorials/advanced-searching.html
(defun org-agenda-prop-search-interactive(key list)
  "Search for VALUE in property KEY; interactively set VALUE"
  (let ((value (completing-read (format "%s: " key) list)))
    (org-agenda-prop-search key value)))

;(map! :desc "Agenda View"
      ;"<f12> p" #'(lambda () (interactive) (org-tags-view t "-@XPLM"))
      ;"<f12> w w" #'(lambda () (interactive) (org-tags-view t "@XPLM"))
      ;"<f12> w p" #'(lambda () (interactive) (org-agenda-prop-search-interactive "customer" xplm-customers)))

#+END_SRC


** Org super agenda
- Commented out to use super agenda

#+BEGIN_SRC emacs-lisp
; Use evil keys instead of having super-agenda overwrite
; https://github.com/alphapapa/org-super-agenda/issues/112
(setq org-super-agenda-header-map nil)
(org-super-agenda-mode)

; For some dumb reason, %s is ignored in org-agenda-prefix-format
; https://stackoverflow.com/questions/58820073/s-in-org-agenda-prefix-format-doesnt-display-dates-in-the-todo-view
; Using a custom expression instead
(setq org-agenda-custom-expression-scheduled '"%(let ((scheduled (org-get-scheduled-time (point)))) (if scheduled (format-time-string \"%Y-%m-%d\" scheduled) \"\")) ")
(setq org-agenda-custom-expression-deadline '"%(let ((deadline (org-get-deadline-time (point)))) (if deadline (format-time-string \"%Y-%m-%d\" deadline) \"\")) ")
(setq org-agenda-custom-commands
      `(("P" "Personal view Everything"
         ((agenda "" (
                      (org-agenda-span 'day)        ; Daily Agenda
                      (org-deadline-warning-days 7) ; 7 day advanced warning for deadlines
                      (org-super-agenda-groups
                       '((:name "Today"
                                :time-grid t
                                :date today
                                :todo "TODAY"
                                :or (
                                  :scheduled (before ,(format-time-string "%Y-%m-%d %a" (days-from-now 1)))
                                  :deadline (before ,(format-time-string "%Y-%m-%d %a" (days-from-now 1)))
                                )
                                :order 1)))))
          (alltodo "" (
                       (org-agenda-overriding-header "Everything TODO-List")
                       (org-agenda-prefix-format (concat "ðŸ“Œ [%c] " org-agenda-custom-expression-scheduled " " org-agenda-custom-expression-deadline " "))
                       ;(org-agenda-prefix-format "ðŸ“Œ [%c] ")
                       (org-super-agenda-groups
                        ; BACKTICK, not single quote
                        ; if single quote is used, cannot use back quote to eval list expressions
                        `(
                          (:discard (:tag ("Chore" "Daily")))
                          (:name "Trivial"
                                :priority<= "C"
                                :tag ("TRIVIAL" "UNIMPORTANT")
                                :todo ("SOMEDAY" )
                                :order 1000)
                          (:name "Next to do"
                                :todo "NEXT"
                                :face (:background "black" :underline t))
                          (:name "Overdue"
                                :face (:background "black" :underline t)
                                :deadline past)
                          (:name "Due Today"
                                :face (:background "black" :underline t)
                                :deadline today)
                          (:name "Important"
                                :tag "Important"
                                :and(
                                    :not(:category "Social")
                                    :priority "A"
                                    )
                                :face (:background "black" :underline t))
                          (:name "Low-Hanging Fruit"
                                :effort< "0:30")
                          (:name "Due Soon"
                                ; Use comma (backquote) to force eval
                                :deadline (before ,(format-time-string "%Y-%m-%d %a" (days-from-now 21))))
                          (:name "Scheduled soon"
                                ; Use comma (backquote) to force eval
                                :scheduled (before ,(format-time-string "%Y-%m-%d %a" (days-from-now 21))))
                          (:name "Tasks"
                                  :category "Tasks")
                          (:name "Social"
                                  :category "Social")
                          (:auto-category t)
                          ))))))

      ("p" "Personal view"
          ((alltodo "" (
                       (org-agenda-overriding-header "TODO-List")
                       (org-agenda-prefix-format (concat "ðŸ“Œ [%c] " org-agenda-custom-expression-scheduled " " org-agenda-custom-expression-deadline " "))
                       ;(org-agenda-prefix-format "ðŸ“Œ [%c] ")
                       (org-super-agenda-groups
                        ; BACKTICK, not single quote
                        ; if single quote is used, cannot use back quote to eval list expressions
                        `(
                          (:discard (:tag ("Chore" "Daily")))
                          (:name "Trivial"
                                :priority<= "C"
                                :tag ("TRIVIAL" "UNIMPORTANT")
                                :todo ("SOMEDAY" )
                                :order 1000)
                          (:name "Next to do"
                                :todo "NEXT"
                                :face (:background "black" :underline t))
                          (:name "Important"
                                :tag "Important"
                                :and(
                                    :not(:category "Social")
                                    :priority "A"
                                    )
                                :face (:background "black" :underline t))
                          (:name "Low-Hanging Fruit"
                                :effort< "0:30")
                          (:name "Tasks"
                                  :category "Tasks")
                          ;(:name "Social"
                                  ;:category "Social")
                          (:discard (:anything))
                          ))))))))

(map! :desc "Agenda View"
      "<f12>" #'(lambda () (interactive) (org-agenda "p")))
#+END_SRC
* BOOKMARKS AND BUFFERS
Doom Emacs uses 'SPC b' for keybindings related to bookmarks and buffers.  Bookmarks are somewhat like registers in that they record positions you can jump to.  Unlike registers, they have long names, and they persist automatically from one Emacs session to the next. The prototypical use of bookmarks is to record where you were reading in various files.  Regarding /buffers/, the text you are editing in Emacs resides in an object called a /buffer/. Each time you visit a file, a buffer is used to hold the fileâ€™s text. Each time you invoke Dired, a buffer is used to hold the directory listing.

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "List bookmarks"
      "b L" 'list-bookmarks
      :leader
      :desc "Save current bookmarks to bookmark file"
      "b w" 'bookmark-save)
#+END_SRC

* DIRED
Dired is the file manager within Emacs.  Below, I setup keybindings for image previews (peep-dired).
Application Shortcut is 'SPC a d'

| COMMAND                                   | DESCRIPTION                                | KEYBINDING |
|-------------------------------------------+--------------------------------------------+------------|
| dired                                     | /Open dired file manager/                  | SPC a d d  |
| dired-jump                                | /Jump to current directory in dired/       | SPC a d j  |
| (in dired) peep-dired                     | /Toggle image previews within dired/       | SPC a d p  |
| (in dired) dired-view-file                | /View file in dired/                       | SPC a d v  |
| (in peep-dired-mode) peep-dired-next-file | /Move to next file in peep-dired-mode/     | j          |
| (in peep-dired-mode) peep-dired-prev-file | /Move to previous file in peep-dired-mode/ | k          |

#+BEGIN_SRC emacs-lisp
(defun xah-open-in-external-app (&optional @fname)
  "Open the current file or dired marked files in external app.
When called in emacs lisp, if @fname is given, open that.
URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
Version 2019-11-04 2021-02-16"
  (interactive)
  (let* (
         ($file-list
          (if @fname
              (progn (list @fname))
            (if (string-equal major-mode "dired-mode")
                (dired-get-marked-files)
              (list (buffer-file-name)))))
         ($do-it-p (if (<= (length $file-list) 5)
                       t
                     (y-or-n-p "Open more than 5 files? "))))
    (when $do-it-p
      (cond
       ((string-equal system-type "windows-nt")
        (mapc
         (lambda ($fpath)
           (shell-command (concat "PowerShell -Command \"Invoke-Item -LiteralPath\" " "'" (shell-quote-argument (expand-file-name $fpath )) "'")))
         $file-list))
       ((string-equal system-type "darwin")
        (mapc
         (lambda ($fpath)
           (shell-command
            (concat "open " (shell-quote-argument $fpath))))  $file-list))
       ((string-equal system-type "gnu/linux")
        (mapc
         (lambda ($fpath) (let ((process-connection-type nil))
                            (start-process "" nil "xdg-open" $fpath))) $file-list))))))


; Dired mode mappings
(map! :leader
      :map dired-mode-map
      :desc "Open in external app"
      "m o" #'(lambda () (interactive) (xah-open-in-external-app)))

(map! :leader
      :desc "Dired"
      "a d d" #'dired
      :leader
      :desc "Dired jump to current"
      "a d j" #'dired-jump
      (:after dired
        (:map dired-mode-map
         :leader
         :desc "Peep-dired image previews"
         "a d p" #'peep-dired
         :leader
         :desc "Dired view file"
         "a d v" #'dired-view-file)))
(evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file
                                             (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+END_SRC

* FONTS
Settings related to fonts within Doom Emacs:
- 'doom-font' -- standard monospace font that is used for most things in Emacs.
- 'doom-variable-pitch-font' -- variable font which is useful in some Emacs plugins.
- 'doom-big-font' -- used in doom-big-font-mode; useful for presentations.
- 'font-lock-comment-face' -- for comments.
- 'font-lock-keyword-face' -- for keywords with special significance, like â€˜forâ€™ and â€˜ifâ€™ in C.

#+BEGIN_SRC emacs-lisp
(setq
      doom-font (font-spec :family "Source Code Variable" :size 14)
      doom-variable-pitch-font (font-spec :family "Ubuntu" :size 14)
      doom-big-font (font-spec :family "Source Code Variable" :size 24))
(after! doom-themes
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+END_SRC

* DOOM THEME
Setting the theme to doom-one.  To try out new themes, I set a keybinding for counsel-load-theme with 'SPC h t'.

#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DARK THEME FAVORITES ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (setq doom-theme 'doom-one)
;; (setq doom-theme 'doom-gruvbox)
;; (setq doom-theme 'doom-horizon)
;; (setq doom-theme 'doom-molokai)
;; (setq doom-theme 'doom-oceanic-next)
;; (setq doom-theme 'doom-tomorrow-night)
(setq doom-theme 'doom-badger)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MID-LIGHT THEME FAVORITES ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; (setq doom-theme 'doom-nova)
;;(setq doom-theme 'doom-nord)
;; (setq doom-theme 'doom-spacegrey)

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; LIGHT THEME FAVORITES ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;(setq doom-theme 'doom-nord-light)

(map! :leader
      :desc "Load new theme"
      "h t" #'counsel-load-theme)
#+END_SRC

* FILE-SYSTEM SHORTCUTS
- Shortcuts to often used locations on the file system
'SPC j f/d <key>'
'j' for 'Jump'
'f' for 'File'
'd' for 'Dir'

| FILE                             | DESCRIPTION             | KEYBINDING  |
|----------------------------------+-------------------------+-------------|
| <ORG_DIR>/agenda/todo.org        | Org Agenda Main file    | SPC j f a   |
| ~/.doom.d/config.org             | /Edit doom config.org/  | SPC j f c   |
| ~/.doom.d/aliases                | /Edit eshell aliases/   | SPC j f e   |
| ~/.doom.d/init.el                | /Edit doom init.el/     | SPC j f i   |
| ~/.doom.d/packages.el            | /Edit doom packages.el/ | SPC j f p   |
| <ORG_DIR>/work/time-tracking.org | Work Time Tracking      | SPC j f w t |


| DIR                 | DESCRIPTION         | KEYBINDING  |
|---------------------+---------------------+-------------|
| <ORG_DIR>           | /root org dir/      | SPC j d o o |
| <ORG_DIR>/agenda    | org agenda dir      | SPC j d a   |
| <ORG_DIR>/work      | /root work org dir/ | SPC j d w w |

#+BEGIN_SRC emacs-lisp
(map! :leader
      :desc "root org"
      "j d o o" #'(lambda () (interactive) (dired org-directory))
      :desc "org agenda"
      "j d a" #'(lambda () (interactive) (dired (concat org-directory "/agenda")))
      :leader
      :desc "root work"
      "j d w w" #'(lambda () (interactive) (dired (concat org-directory "/work/grafixSolutions")))
      ;:leader
      ;:desc "work ecad"
      ;"j d w e" #'(lambda () (interactive) (dired (concat org-directory "/work/xplm/ecad")))
      ;:leader
      ;:desc "work time"
      ;"j f w t" #'(lambda () (interactive) (find-file (concat org-directory "/work/xplm/time-tracking.org")))
      :leader
      :desc "Edit todo.org"
      "j f a" #'(lambda () (interactive) (find-file (concat org-directory "/agenda/todo.org")))
      :leader
      :desc "Edit doom config.org"
      "j f c" #'(lambda () (interactive) (find-file "~/.doom.d/config.org"))
      :leader
      :desc "Edit eshell aliases"
      "j f e" #'(lambda () (interactive) (find-file "~/.doom.d/aliases"))
      :leader
      :desc "Edit doom init.el"
      "j f i" #'(lambda () (interactive) (find-file "~/.doom.d/init.el"))
      :leader
      :desc "Edit doom packages.el"
      "j f p" #'(lambda () (interactive) (find-file "~/.doom.d/packages.el")))
#+END_SRC

* YAS
#+begin_src emacs-lisp
(after! yasnippet
  (setq yas--default-user-snippets-dir "~/.doom.d/snippets"))

;; add extra snippet directories
(setq yas-snippet-dirs (append yas-snippet-dirs
                               '("~/Dropbox/emacs-snippets")))
#+end_src

* Company

#+begin_src emacs-lisp
(setq company-backends
      '((company-files          ; files & directory
         company-keywords       ; keywords
         company-capf           ; CompletAtPointFunction defined by major mode
         company-yasnippet      ; Snippets
         company-dabbrev-code   ; Symbols in the current buffer that aren't comments or strings
         )
        (company-abbrev company-dabbrev) ; Backend for the company-abbrev function
        ))

;; Enable Auto-complete globally
(add-hook 'after-init-hook 'global-company-mode)

(setq-default company-idle-delay 0)
(setq-default company-minimum-prefix-length 2) ; Show suggestions after entering characters
(setq-default company-selection-wrap-around t)
; Use tab key to cycle through suggestions.
; ('tng' means 'tab and go')
(company-tng-configure-default)
#+end_src

* Syntax
#+begin_src emacs-lisp
; Add underscore to gdscrit mode
(add-hook 'gdscript-mode-hook #'(lambda () (modify-syntax-entry ?_ "w")))
; Add dash to emacs-lisp mode
(add-hook 'emacs-lisp-mode-hook #'(lambda () (modify-syntax-entry ?- "w")))
#+end_src

* Outlook
See Outlook.org::[[file:~/Dropbox/org-mode/tech/outlook.org::*Link to message][Link to message]]
One gotcha with this method:
- GUID's change when you move a message between document stores
- If you get the GUID to the message while it's on your Exchange server and then move it to your local PST file the link will change
- Move the message before you get the GUID.
- Outlook links will likely only work on the machine they originate on

This issue shouldn't be a very big deal. All emails are work related and will only be accessed on my work computer.
If ever you want to change this, reconfigure Outlook to save an email as HTML in Dropbox and then use the dropbox path.
#+BEGIN_SRC emacs-lisp
;;; org-outlook.el - Support for links to Outlook items in Org
;; (require 'org)
(org-add-link-type "outlook" 'org-outlook-open)
(defun org-outlook-open (id)
   "Open the Outlook item identified by ID.  ID should be an Outlook GUID."
   (w32-shell-execute "open" "C:/Outlook" (concat "/select " "outlook:" id))) ;; To use this method, outlook must exist or have a shortcut at the specified location
   ;; To use this method, need to do a registry tweak
   ;(w32-shell-execute "open" (concat "outlook:" id)))

;(provide 'org-outlook)

;;; org-outlook.el ends here
#+END_SRC
: org-outlook-open

* Mermaid
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.mermaid\\'" . mermaid-mode))
(if (eq system-type 'windows-nt)
    (setq mermaid-mmdc-location "~/.doom.d/dependencies/mermaid-cli/node_modules/.bin/mmdc.cmd")
    (setq mermaid-mmdc-location "~/.doom.d/dependencies/mermaid-cli/node_modules/.bin/mmdc"))
;(setq mermaid-output-format ".png")
;(setq mermaid-tmp-dir "~/.doom.d/mermaid-tmp/")
;(setq mermaid-flags "")
#+end_src
* Formatting
Auto Formatting for languages
#+begin_src emacs-lisp
(map! :desc "autoformat"
      "<f10>" #'(lambda () (interactive) (format-all-buffer)))
#+end_src
